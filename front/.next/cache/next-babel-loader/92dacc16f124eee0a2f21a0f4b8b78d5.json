{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadPosts),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadPosts),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, call, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS } from \"../reducers/post/actions\";\n\nfunction loadPostsAPI() {\n  return axios.get(\"/posts\");\n}\n\nfunction loadPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostsAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:\\Users\\우희준\\webdev\\mypet-community-web-app\\front\\sagas\\post.js"],"names":["loadPosts","watchLoadPosts","postSaga","all","fork","put","call","takeLatest","axios","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","loadPostsAPI","get","result","type","data","console","error"],"mappings":";;;;yBAYUA,S;;;yBAeAC,c;;;yBAIeC,Q;;AA/BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,0BAJP;;AAMA,SAASC,YAAT,GAAwB;AACtB,SAAOJ,KAAK,CAACK,GAAN,CAAU,QAAV,CAAP;AACD;;AAED,SAAUb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMM,IAAI,CAACM,YAAD,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMT,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEJ,kBADE;AAERK,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIC,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMb,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUT,cAAV;AAAA;AAAA;AAAA;AAAA;AACEM,UAAAA,UAAU,CAACE,kBAAD,EAAqBT,SAArB,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,cAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, call, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_SUCCESS\r\n} from \"../reducers/post/actions\";\r\n\r\nfunction loadPostsAPI() {\r\n  return axios.get(\"/posts\");\r\n}\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    const result = yield call(loadPostsAPI);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchLoadPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}