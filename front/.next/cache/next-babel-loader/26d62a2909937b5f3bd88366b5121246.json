{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_USER_SUCCESS, LOAD_USER_REQUEST, LOAD_USER_FAILURE } from \"../reducers/user/actions\";\n\nfunction loadUserAPI() {\n  return axios.get(\"/user\");\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:\\Users\\우희준\\webdev\\mypet-community-web-app\\front\\sagas\\user.js"],"names":["loadUser","watchLoadUser","userSaga","all","fork","takeLatest","put","call","axios","LOAD_USER_SUCCESS","LOAD_USER_REQUEST","LOAD_USER_FAILURE","loadUserAPI","get","result","type","data","console","error"],"mappings":";;;;yBAYUA,Q;;;yBAeAC,a;;;yBAIeC,Q;;AA/BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,0BAJP;;AAMA,SAASC,WAAT,GAAuB;AACrB,SAAOJ,KAAK,CAACK,GAAN,CAAU,OAAV,CAAP;AACD;;AAED,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMO,IAAI,CAACK,WAAD,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMR,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEN,iBADE;AAERO,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIC,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMZ,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUV,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACK,iBAAD,EAAoBV,QAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,aAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\nfunction loadUserAPI() {\r\n  return axios.get(\"/user\");\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const result = yield call(loadUserAPI);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLoadUser)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}