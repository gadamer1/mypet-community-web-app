{"ast":null,"code":"import { fork, takeLatest, all, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { CHECK_EMAIL_DUPLICATE_REQUEST, CHECK_EMAIL_DUPLICATE_FAILURE, CHECK_EMAIL_DUPLICATE_SUCCESS, CHECK_NICKNAME_DUPLICATE_REQUEST, CHECK_NICKNAME_DUPLICATE_FAILURE, CHECK_NICKNAME_DUPLICATE_SUCCESS } from \"../reducers/check/actions\"; ///////////닉네임 중복검사/////////////\n\nfunction checkNicknameDuplicateAPI(nickname) {\n  return axios.get(`/check/nickname/${nickname}`);\n}\n\nfunction* checkNicknameDuplicate(action) {\n  try {\n    const result = yield call(checkNicknameDuplicateAPI, action.data);\n    yield put({\n      type: CHECK_NICKNAME_DUPLICATE_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: CHECK_NICKNAME_DUPLICATE_FAILURE,\n      data: e\n    });\n  }\n}\n\nfunction* watchCheckNicknameDuplicate() {\n  yield takeLatest(CHECK_NICKNAME_DUPLICATE_REQUEST, checkNicknameDuplicate);\n} /////////////이메일 중복 검사////////////////\n\n\nfunction checkEmailDuplicateAPI(email) {\n  return axios.get(`/check/email/${email}`);\n}\n\nfunction* checkEmailDuplicate(action) {\n  try {\n    const result = yield call(checkEmailDuplicateAPI, action.data);\n    yield put({\n      type: CHECK_EMAIL_DUPLICATE_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: CHECK_EMAIL_DUPLICATE_FAILURE,\n      data: e\n    });\n  }\n}\n\nfunction* watchCheckEmailDuplicate() {\n  yield takeLatest(CHECK_EMAIL_DUPLICATE_REQUEST, checkEmailDuplicate);\n}\n\nexport default function* checksSaga() {\n  yield all([fork(watchCheckNicknameDuplicate), fork(watchCheckEmailDuplicate)]);\n}","map":{"version":3,"sources":["D:\\webdev\\mypet-community-web-app\\front\\sagas\\checks.js"],"names":["fork","takeLatest","all","put","call","axios","CHECK_EMAIL_DUPLICATE_REQUEST","CHECK_EMAIL_DUPLICATE_FAILURE","CHECK_EMAIL_DUPLICATE_SUCCESS","CHECK_NICKNAME_DUPLICATE_REQUEST","CHECK_NICKNAME_DUPLICATE_FAILURE","CHECK_NICKNAME_DUPLICATE_SUCCESS","checkNicknameDuplicateAPI","nickname","get","checkNicknameDuplicate","action","result","data","type","e","console","error","watchCheckNicknameDuplicate","checkEmailDuplicateAPI","email","checkEmailDuplicate","watchCheckEmailDuplicate","checksSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,6BADF,EAEEC,6BAFF,EAGEC,6BAHF,EAIEC,gCAJF,EAKEC,gCALF,EAMEC,gCANF,QAOO,2BAPP,C,CAWA;;AACA,SAASC,yBAAT,CAAmCC,QAAnC,EAA6C;AAC3C,SAAOR,KAAK,CAACS,GAAN,CAAW,mBAAkBD,QAAS,EAAtC,CAAP;AACD;;AAED,UAAUE,sBAAV,CAAiCC,MAAjC,EAAyC;AACvC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMb,IAAI,CAACQ,yBAAD,EAA4BI,MAAM,CAACE,IAAnC,CAAzB;AACA,UAAMf,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER,gCADE;AAERO,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAET,gCADE;AAERQ,MAAAA,IAAI,EAAEE;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,2BAAV,GAAwC;AACtC,QAAMtB,UAAU,CAACQ,gCAAD,EAAmCM,sBAAnC,CAAhB;AACD,C,CAED;;;AACA,SAASS,sBAAT,CAAgCC,KAAhC,EAAuC;AAErC,SAAOpB,KAAK,CAACS,GAAN,CAAW,gBAAeW,KAAM,EAAhC,CAAP;AACD;;AAED,UAAUC,mBAAV,CAA8BV,MAA9B,EAAsC;AACpC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMb,IAAI,CAACoB,sBAAD,EAAyBR,MAAM,CAACE,IAAhC,CAAzB;AACA,UAAMf,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX,6BADE;AAERU,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEZ,6BADE;AAERW,MAAAA,IAAI,EAAEE;AAFE,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,wBAAV,GAAqC;AACnC,QAAM1B,UAAU,CAACK,6BAAD,EAAgCoB,mBAAhC,CAAhB;AACD;;AAED,eAAe,UAAUE,UAAV,GAAuB;AACpC,QAAM1B,GAAG,CAAC,CACRF,IAAI,CAACuB,2BAAD,CADI,EAERvB,IAAI,CAAC2B,wBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { fork, takeLatest, all, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  CHECK_EMAIL_DUPLICATE_REQUEST,\r\n  CHECK_EMAIL_DUPLICATE_FAILURE,\r\n  CHECK_EMAIL_DUPLICATE_SUCCESS,\r\n  CHECK_NICKNAME_DUPLICATE_REQUEST,\r\n  CHECK_NICKNAME_DUPLICATE_FAILURE,\r\n  CHECK_NICKNAME_DUPLICATE_SUCCESS\r\n} from \"../reducers/check/actions\";\r\n\r\n\r\n\r\n///////////닉네임 중복검사/////////////\r\nfunction checkNicknameDuplicateAPI(nickname) {\r\n  return axios.get(`/check/nickname/${nickname}`);\r\n}\r\n\r\nfunction* checkNicknameDuplicate(action) {\r\n  try {\r\n    const result = yield call(checkNicknameDuplicateAPI, action.data);\r\n    yield put({\r\n      type: CHECK_NICKNAME_DUPLICATE_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: CHECK_NICKNAME_DUPLICATE_FAILURE,\r\n      data: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchCheckNicknameDuplicate() {\r\n  yield takeLatest(CHECK_NICKNAME_DUPLICATE_REQUEST, checkNicknameDuplicate);\r\n}\r\n\r\n/////////////이메일 중복 검사////////////////\r\nfunction checkEmailDuplicateAPI(email) {\r\n\r\n  return axios.get(`/check/email/${email}`);\r\n}\r\n\r\nfunction* checkEmailDuplicate(action) {\r\n  try {\r\n    const result = yield call(checkEmailDuplicateAPI, action.data);\r\n    yield put({\r\n      type: CHECK_EMAIL_DUPLICATE_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: CHECK_EMAIL_DUPLICATE_FAILURE,\r\n      data: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchCheckEmailDuplicate() {\r\n  yield takeLatest(CHECK_EMAIL_DUPLICATE_REQUEST, checkEmailDuplicate);\r\n}\r\n\r\nexport default function* checksSaga() {\r\n  yield all([\r\n    fork(watchCheckNicknameDuplicate),\r\n    fork(watchCheckEmailDuplicate)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}