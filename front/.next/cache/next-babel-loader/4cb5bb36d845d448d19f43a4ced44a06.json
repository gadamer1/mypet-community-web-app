{"ast":null,"code":"import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOAD_USER_SUCCESS, LOAD_USER_REQUEST, LOAD_USER_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user/actions\";\n\nfunction loadUserAPI() {\n  return axios.get(\"/user\");\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction loginAPI(data) {\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOGIN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction signupAPI(data) {\n  return axios.post(\"/user/signup\", data);\n}\n\nfunction* signup(action) {\n  try {\n    const result = yield call(signupAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGN_UP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogin), fork(watchSignup)]);\n}","map":{"version":3,"sources":["D:\\webdev\\mypet-community-web-app\\front\\sagas\\user.js"],"names":["all","fork","takeLatest","put","call","axios","LOAD_USER_SUCCESS","LOAD_USER_REQUEST","LOAD_USER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loadUserAPI","get","loadUser","result","type","data","e","console","error","watchLoadUser","loginAPI","post","withCredentials","login","action","watchLogin","signupAPI","signup","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,0BAVP;;AAYA,SAASC,WAAT,GAAuB;AACrB,SAAOV,KAAK,CAACW,GAAN,CAAU,OAAV,CAAP;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACW,WAAD,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEb,iBADE;AAERc,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUgB,aAAV,GAA0B;AACxB,QAAMtB,UAAU,CAACK,iBAAD,EAAoBU,QAApB,CAAhB;AACD;;AAED,SAASQ,QAAT,CAAkBL,IAAlB,EAAwB;AACtB,SAAOf,KAAK,CAACqB,IAAN,CAAW,aAAX,EAAyBN,IAAzB,EAA8B;AACnCO,IAAAA,eAAe,EAAE;AADkB,GAA9B,CAAP;AAGD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMX,MAAM,GAAG,MAAMd,IAAI,CAACqB,QAAD,EAAUI,MAAM,CAACT,IAAjB,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAET,aADE;AAERU,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUmB,UAAV,GAAuB;AACrB,QAAM5B,UAAU,CAACO,aAAD,EAAgBmB,KAAhB,CAAhB;AACD;;AAGD,SAASG,SAAT,CAAmBX,IAAnB,EAAyB;AACvB,SAAOf,KAAK,CAACqB,IAAN,CAAW,cAAX,EAA0BN,IAA1B,CAAP;AACD;;AAED,UAAUY,MAAV,CAAiBH,MAAjB,EAAyB;AACvB,MAAI;AACF,UAAMX,MAAM,GAAG,MAAMd,IAAI,CAAC2B,SAAD,EAAWF,MAAM,CAACT,IAAlB,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEN,eADE;AAERO,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUmB,WAAV,GAAwB;AACtB,QAAM/B,UAAU,CAACU,eAAD,EAAkBoB,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMlC,GAAG,CAAC,CACRC,IAAI,CAACuB,aAAD,CADI,EAERvB,IAAI,CAAC6B,UAAD,CAFI,EAGR7B,IAAI,CAACgC,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_FAILURE,\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\nfunction loadUserAPI() {\r\n  return axios.get(\"/user\");\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const result = yield call(loadUserAPI);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user/login\",data,{\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginAPI,action.data);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOGIN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\n\r\nfunction signupAPI(data) {\r\n  return axios.post(\"/user/signup\",data);\r\n}\r\n\r\nfunction* signup(action) {\r\n  try {\r\n    const result = yield call(signupAPI,action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignup() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signup);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadUser),\r\n    fork(watchLogin),\r\n    fork(watchSignup),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}