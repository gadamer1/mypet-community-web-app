{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(checkNicknameDuplicate),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchCheckNicknameDuplicate),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(checkEmailDuplicate),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchCheckEmailDuplicate),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(checksSaga);\n\nimport { fork, takeLatest, all, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { CHECK_EMAIL_DUPLICATE_REQUEST, CHECK_EMAIL_DUPLICATE_FAILURE, CHECK_EMAIL_DUPLICATE_SUCCESS, CHECK_NICKNAME_DUPLICATE_REQUEST, CHECK_NICKNAME_DUPLICATE_FAILURE, CHECK_NICKNAME_DUPLICATE_SUCCESS } from \"../reducers/check/actions\"; ///////////닉네임 중복검사/////////////\n\nfunction checkNicknameDuplicateAPI(nickname) {\n  return axios.get(\"/check/nickname/\".concat(nickname));\n}\n\nfunction checkNicknameDuplicate(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function checkNicknameDuplicate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(checkNicknameDuplicateAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: CHECK_NICKNAME_DUPLICATE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: CHECK_NICKNAME_DUPLICATE_FAILURE,\n            data: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchCheckNicknameDuplicate() {\n  return _regeneratorRuntime.wrap(function watchCheckNicknameDuplicate$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(CHECK_NICKNAME_DUPLICATE_REQUEST, checkNicknameDuplicate);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} /////////////이메일 중복 검사////////////////\n\n\nfunction checkEmailDuplicateAPI(email) {\n  return axios.get(\"/check/email/\".concat(email));\n}\n\nfunction checkEmailDuplicate(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function checkEmailDuplicate$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(checkEmailDuplicateAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: CHECK_EMAIL_DUPLICATE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: CHECK_EMAIL_DUPLICATE_FAILURE,\n            data: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchCheckEmailDuplicate() {\n  return _regeneratorRuntime.wrap(function watchCheckEmailDuplicate$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(CHECK_EMAIL_DUPLICATE_REQUEST, checkEmailDuplicate);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function checksSaga() {\n  return _regeneratorRuntime.wrap(function checksSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchCheckNicknameDuplicate), fork(watchCheckEmailDuplicate)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:\\webdev\\mypet-community-web-app\\front\\sagas\\checks.js"],"names":["checkNicknameDuplicate","watchCheckNicknameDuplicate","checkEmailDuplicate","watchCheckEmailDuplicate","checksSaga","fork","takeLatest","all","put","call","axios","CHECK_EMAIL_DUPLICATE_REQUEST","CHECK_EMAIL_DUPLICATE_FAILURE","CHECK_EMAIL_DUPLICATE_SUCCESS","CHECK_NICKNAME_DUPLICATE_REQUEST","CHECK_NICKNAME_DUPLICATE_FAILURE","CHECK_NICKNAME_DUPLICATE_SUCCESS","checkNicknameDuplicateAPI","nickname","get","action","data","result","type","console","error","checkEmailDuplicateAPI","email"],"mappings":";;;;yBAkBUA,sB;;;yBAgBAC,2B;;;yBAUAC,mB;;;yBAgBAC,wB;;;yBAIeC,U;;AAhEzB,SAASC,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,6BADF,EAEEC,6BAFF,EAGEC,6BAHF,EAIEC,gCAJF,EAKEC,gCALF,EAMEC,gCANF,QAOO,2BAPP,C,CAWA;;AACA,SAASC,yBAAT,CAAmCC,QAAnC,EAA6C;AAC3C,SAAOR,KAAK,CAACS,GAAN,2BAA6BD,QAA7B,EAAP;AACD;;AAED,SAAUlB,sBAAV,CAAiCoB,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACQ,yBAAD,EAA4BG,MAAM,CAACC,IAAnC,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMd,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEP,gCADE;AAERK,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIG,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMjB,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAER,gCADE;AAERM,YAAAA,IAAI;AAFI,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUpB,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACQ,gCAAD,EAAmCd,sBAAnC,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAAS0B,sBAAT,CAAgCC,KAAhC,EAAuC;AAErC,SAAOjB,KAAK,CAACS,GAAN,wBAA0BQ,KAA1B,EAAP;AACD;;AAED,SAAUzB,mBAAV,CAA8BkB,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACiB,sBAAD,EAAyBN,MAAM,CAACC,IAAhC,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMd,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEV,6BADE;AAERQ,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIG,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMjB,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEX,6BADE;AAERS,YAAAA,IAAI;AAFI,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUlB,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACK,6BAAD,EAAgCT,mBAAhC,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRF,IAAI,CAACJ,2BAAD,CADI,EAERI,IAAI,CAACF,wBAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { fork, takeLatest, all, put, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  CHECK_EMAIL_DUPLICATE_REQUEST,\r\n  CHECK_EMAIL_DUPLICATE_FAILURE,\r\n  CHECK_EMAIL_DUPLICATE_SUCCESS,\r\n  CHECK_NICKNAME_DUPLICATE_REQUEST,\r\n  CHECK_NICKNAME_DUPLICATE_FAILURE,\r\n  CHECK_NICKNAME_DUPLICATE_SUCCESS\r\n} from \"../reducers/check/actions\";\r\n\r\n\r\n\r\n///////////닉네임 중복검사/////////////\r\nfunction checkNicknameDuplicateAPI(nickname) {\r\n  return axios.get(`/check/nickname/${nickname}`);\r\n}\r\n\r\nfunction* checkNicknameDuplicate(action) {\r\n  try {\r\n    const result = yield call(checkNicknameDuplicateAPI, action.data);\r\n    yield put({\r\n      type: CHECK_NICKNAME_DUPLICATE_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: CHECK_NICKNAME_DUPLICATE_FAILURE,\r\n      data: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchCheckNicknameDuplicate() {\r\n  yield takeLatest(CHECK_NICKNAME_DUPLICATE_REQUEST, checkNicknameDuplicate);\r\n}\r\n\r\n/////////////이메일 중복 검사////////////////\r\nfunction checkEmailDuplicateAPI(email) {\r\n\r\n  return axios.get(`/check/email/${email}`);\r\n}\r\n\r\nfunction* checkEmailDuplicate(action) {\r\n  try {\r\n    const result = yield call(checkEmailDuplicateAPI, action.data);\r\n    yield put({\r\n      type: CHECK_EMAIL_DUPLICATE_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: CHECK_EMAIL_DUPLICATE_FAILURE,\r\n      data: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchCheckEmailDuplicate() {\r\n  yield takeLatest(CHECK_EMAIL_DUPLICATE_REQUEST, checkEmailDuplicate);\r\n}\r\n\r\nexport default function* checksSaga() {\r\n  yield all([\r\n    fork(watchCheckNicknameDuplicate),\r\n    fork(watchCheckEmailDuplicate)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}